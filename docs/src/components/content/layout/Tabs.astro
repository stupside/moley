---
import type { TabBlock, TabsBlock } from "../../../types/content.js";
import { cn } from "../../../utils/classes.js";
import { createSlug } from "../../../utils/content.js";
import ContentRenderer from "../../ContentRenderer.astro";

export interface Props {
	content: TabsBlock;
}

const { content } = Astro.props;
const tabs: TabBlock[] = content.children || [];
const tabsId =
	content.id || createSlug(`tabs-${tabs.map((t) => t.title).join("-")}`);

// Tab button classes
const BASE_CLASSES = "px-4 py-2 text-sm font-medium rounded-lg transition-colors border cursor-pointer";
const ACTIVE_CLASSES = "bg-white text-orange-700 border-gray-200";
const INACTIVE_CLASSES = "text-gray-600 hover:text-gray-900 hover:bg-white/50 border-transparent";
---

<div class={content.className} id={content.id} data-tabs={tabsId}>
  <div class="border-b border-gray-200 pb-3 mb-3" role="tablist">
    <div class="flex gap-1">
      {tabs.map((tab, index) => (
        <button
          class={cn(
            BASE_CLASSES,
            index === 0 ? ACTIVE_CLASSES : INACTIVE_CLASSES
          )}
          data-tab-button={index}
          aria-selected={index === 0}
          role="tab"
        >
          {tab.title}
        </button>
      ))}
    </div>
  </div>

  <div>
    {tabs.map((tab, index) => (
      <div
        class={index === 0 ? "block" : "hidden"}
        data-tab-panel={index}
        id={`${tabsId}-panel-${index}`}
      >
        <ContentRenderer content={tab} />
      </div>
    ))}
  </div>
</div>

<script>
  // Tab button classes (duplicated from frontmatter for script access)
  const BASE_CLASSES = "px-4 py-2 text-sm font-medium rounded-lg transition-colors border cursor-pointer";
  const ACTIVE_CLASSES = "bg-white text-orange-700 border-gray-200";
  const INACTIVE_CLASSES = "text-gray-600 hover:text-gray-900 hover:bg-white/50 border-transparent";

  interface TabSystem {
    container: HTMLElement;
    buttons: NodeListOf<HTMLButtonElement>;
    panels: NodeListOf<HTMLElement>;
    activeIndex: number;
  }

  class TabController {
    private tabs: TabSystem;

    constructor(container: HTMLElement) {
      this.tabs = {
        container,
        buttons: container.querySelectorAll('[data-tab-button]'),
        panels: container.querySelectorAll('[data-tab-panel]'),
        activeIndex: 0
      };

      this.init();
    }

    private init(): void {
      this.tabs.buttons.forEach((button, index) => {
        button.addEventListener('click', () => this.switchTab(index));
      });
    }

    private switchTab(index: number): void {
      if (index === this.tabs.activeIndex) return;

      // Update buttons
      this.updateButton(this.tabs.activeIndex, false);
      this.updateButton(index, true);

      // Update panels
      this.updatePanel(this.tabs.activeIndex, false);
      this.updatePanel(index, true);

      this.tabs.activeIndex = index;
    }

    private updateButton(index: number, isActive: boolean): void {
      const button = this.tabs.buttons[index];
      if (!button) return;

      button.className = [BASE_CLASSES, isActive ? ACTIVE_CLASSES : INACTIVE_CLASSES].join(' ');
      button.setAttribute('aria-selected', isActive.toString());
    }

    private updatePanel(index: number, isActive: boolean): void {
      const panel = this.tabs.panels[index];
      if (!panel) return;

      panel.className = isActive ? 'block' : 'hidden';
    }
  }

  // Initialize all tab containers
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('[data-tabs]').forEach((container) => {
      new TabController(container as HTMLElement);
    });
  });
</script>